@page "/cart"
@inject CartService CartService
@inject UserStateService UserStateService
@inject NavigationManager NavigationManager

<h3>Your Cart</h3>

@if (CartItems == null)
{
    <p><em>Loading...</em></p>
}
else if (CartItems.Count == 0)
{
    <p>Your cart is empty. <a href="/products">Go shopping</a></p>
}
else
{
    <ul class="cart-items">
        @foreach (var item in CartItems)
        {
            <li>
                <strong>@item.Product?.Name</strong> - Quantity: @item.Quantity
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveProduct(item.ProductId)">Remove</button>
            </li>
        }
    </ul>
}

@code {
    private List<CartItem> CartItems;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = UserStateService.GetCurrentUserId();

            if (userId <= 0)
            {
                Console.WriteLine("Invalid user ID. Redirecting to login.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            var cart = await CartService.GetCart(userId);
            CartItems = cart.Items;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
        }
    }

    private async Task RemoveProduct(int productId)
    {
        try
        {
            var userId = UserStateService.GetCurrentUserId();

            // Call API to remove product
            await CartService.RemoveFromCart(userId, productId);

            // Refresh the cart after removal
            var cart = await CartService.GetCart(userId);
            CartItems = cart.Items;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing product: {ex.Message}");
        }
    }
}
