@page "/products"
@inject ProductService ProductService
@inject CartService CartService
@inject UserStateService UserStateService

<h3>Products</h3>

@if (Products == null)
{
    <p><em>Loading...</em></p>
}
else if (Products.Count == 0)
{
    <p>No products available at the moment.</p>
}
else
{
    <div class="product-list">
        @foreach (var product in Products)
        {
            <div class="product-card">
                <h4>@product.Name</h4>
                <p>@product.Description</p>
                <p>Price: @product.Price @product.Currency</p>
                <p>Stock: @product.Stock</p>
                <button @onclick="() => AddToCart(product.Id)" class="btn btn-primary">Add to Cart</button>
            </div>
        }
    </div>
}

@code {
    private List<Product> Products;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await ProductService.GetProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private async Task AddToCart(int productId)
    {
        try
        {
            var userId = UserStateService.GetCurrentUserId();
            await CartService.AddToCart(userId, productId, 1); // Adding 1 quantity by default
            Console.WriteLine($"Product {productId} added to cart.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding product to cart: {ex.Message}");
        }
    }
}
